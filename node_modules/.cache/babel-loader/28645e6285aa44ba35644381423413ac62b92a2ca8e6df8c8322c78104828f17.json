{"ast":null,"code":"var _jsxFileName = \"/Users/prathambansal/Desktop/forms/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport useInput from '../hooks/use-Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const {\n    value: enteredName,\n    valueIsValid: enteredNameIsValid,\n    hasError: nameInputIsInvalid,\n    valueChangeHandler: nameInputChangeHandler,\n    inputBlurHandler: nameInputBlurHandler\n  } = useInput(value => {\n    return value.trim() != '';\n  });\n  const {\n    value: enteredEmail,\n    valueIsValid: enteredEmailIsValid,\n    hasError: emailInputIsInvalid,\n    valueChangeHandler: emailInputChangeHandler,\n    inputBlurHandler: emailInputBlurHandler\n  } = useInput(value => {\n    return value.trim() != '' && value.includes('@');\n  });\n  // const [enteredName,setEnteredName]=useState('');\n  // const [enteredNameTouched,setEnteredNameTouched]=useState(false);\n  // const [enteredEmail,setEnteredEmail]=useState('');\n  // const [enteredEmailTouched,setEnteredEmailTouched]=useState(false);\n  // const enteredEmailIsValid=enteredEmail.trim()!=='' && enteredEmail.includes('@');\n  // const emailInputIsInvalid=!enteredEmailIsValid && enteredEmailTouched;\n  // const enteredNameIsValid=enteredName.trim()!=='';\n  // const nameInputIsInvalid=!enteredNameIsValid && enteredNameTouched;\n\n  // const emailInputChangeHandler=(event)=>{\n  //   setEnteredEmail(event.target.value);\n  // }\n  // const emailInputBlurHandler=()=>{\n  //   setEnteredEmailTouched(true);\n  // }\n  // const nameInputChangeHandler=(event)=>{\n  //   setEnteredName(event.target.value);\n  // }\n  // const nameInputBlurHandler=()=>{\n  //   setEnteredNameTouched(true);\n  // }\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n  const nameInputClasses = !nameInputIsInvalid ? 'form-control' : 'form-control invalid';\n  const emailInputClasses = !emailInputIsInvalid ? 'form-control' : 'form-control invalid';\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n    console.log(enteredName);\n    console.log(enteredEmail);\n    setEnteredName('');\n    setEnteredEmail('');\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your E-mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        value: enteredEmail,\n        onBlur: emailInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty and must contain @.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"Bby7+AmN1e8DBmLehPEAu7XOD7I=\", false, function () {\n  return [useInput, useInput];\n});\n_c = SimpleInput;\nexport default SimpleInput;\n\n// import { useRef,useState } from 'react';\n\n// const SimpleInput = (props) => {\n//   const nameInputRef=useRef();\n//   const [enteredName,setEnteredName]=useState('');\n//   const [enteredNameIsValid,setEnteredNameIsValid]=useState(false);\n//   const [enteredNameTouched,setEnteredNameTouched]=useState(false);\n\n//   const nameInputChangeHandler=(event)=>{\n//     // event.preventDefault();\n//     setEnteredName(event.target.value);\n//     if(event.target.value.trim()!==''){\n//       setEnteredNameIsValid(true);\n//       return;\n//     }\n//   }\n//   const nameInputBlurHandler=()=>{\n//     setEnteredNameTouched(true);\n//     if(enteredName.trim()===''){\n//       setEnteredNameIsValid(false);\n//       return;\n//     }\n//   }\n//   const formSubmissionHandler=(event)=>{\n//     setEnteredNameTouched(true);\n//     event.preventDefault();\n//     if(enteredName.trim()===''){\n//       setEnteredNameIsValid(false);\n//       return;\n//     }\n//     setEnteredNameIsValid(true);\n//     console.log(enteredName);\n//     console.log(nameInputRef.current.value);\n//     setEnteredName('');\n//   }\n\n//   const nameInputIsInvalid=!enteredNameIsValid && enteredNameTouched;\n\n//   const nameInputClasses=!nameInputIsInvalid? 'form-control':'form-control invalid';\n\n//   return (\n//     <form onSubmit={formSubmissionHandler}>\n//       <div className={nameInputClasses}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input ref={nameInputRef} type='text' id='name' onChange={nameInputChangeHandler} value={enteredName} onBlur={nameInputBlurHandler}/>\n//         {nameInputIsInvalid && <p className='error-text'>Name must not be empty.</p>}\n//       </div>\n//       <div className=\"form-actions\">\n//         <button>Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useInput","jsxDEV","_jsxDEV","SimpleInput","props","_s","value","enteredName","valueIsValid","enteredNameIsValid","hasError","nameInputIsInvalid","valueChangeHandler","nameInputChangeHandler","inputBlurHandler","nameInputBlurHandler","trim","enteredEmail","enteredEmailIsValid","emailInputIsInvalid","emailInputChangeHandler","emailInputBlurHandler","includes","formIsValid","nameInputClasses","emailInputClasses","formSubmissionHandler","event","preventDefault","setEnteredNameTouched","setEnteredEmailTouched","console","log","setEnteredName","setEnteredEmail","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","onBlur","disabled","_c","$RefreshReg$"],"sources":["/Users/prathambansal/Desktop/forms/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from 'react';\nimport useInput from '../hooks/use-Input';\n\nconst SimpleInput = (props) => {\n  const {value:enteredName ,valueIsValid:enteredNameIsValid ,hasError:nameInputIsInvalid ,valueChangeHandler:nameInputChangeHandler ,inputBlurHandler:nameInputBlurHandler}=useInput((value)=>{return value.trim()!=''});\n  const {value:enteredEmail ,valueIsValid:enteredEmailIsValid ,hasError:emailInputIsInvalid ,valueChangeHandler:emailInputChangeHandler ,inputBlurHandler:emailInputBlurHandler}=useInput((value)=>{return value.trim()!='' && value.includes('@');});\n  // const [enteredName,setEnteredName]=useState('');\n  // const [enteredNameTouched,setEnteredNameTouched]=useState(false);\n  // const [enteredEmail,setEnteredEmail]=useState('');\n  // const [enteredEmailTouched,setEnteredEmailTouched]=useState(false);\n  // const enteredEmailIsValid=enteredEmail.trim()!=='' && enteredEmail.includes('@');\n  // const emailInputIsInvalid=!enteredEmailIsValid && enteredEmailTouched;\n  // const enteredNameIsValid=enteredName.trim()!=='';\n  // const nameInputIsInvalid=!enteredNameIsValid && enteredNameTouched;\n\n  // const emailInputChangeHandler=(event)=>{\n    //   setEnteredEmail(event.target.value);\n    // }\n    // const emailInputBlurHandler=()=>{\n      //   setEnteredEmailTouched(true);\n    // }\n    // const nameInputChangeHandler=(event)=>{\n      //   setEnteredName(event.target.value);\n      // }\n      // const nameInputBlurHandler=()=>{\n        //   setEnteredNameTouched(true);\n        // }\n  let formIsValid=false;\n\n  if(enteredNameIsValid && enteredEmailIsValid){\n    formIsValid=true;\n  }\n\n  const nameInputClasses=!nameInputIsInvalid? 'form-control':'form-control invalid';\n  const emailInputClasses=!emailInputIsInvalid? 'form-control':'form-control invalid';\n  const formSubmissionHandler=(event)=>{\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n    if(!enteredNameIsValid || !enteredEmailIsValid){\n      return;\n    }\n    console.log(enteredName);\n    console.log(enteredEmail);\n    setEnteredName('');\n    setEnteredEmail('');\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  }\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' onChange={nameInputChangeHandler} value={enteredName} onBlur={nameInputBlurHandler}/>\n        {nameInputIsInvalid && <p className='error-text'>Name must not be empty.</p>}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your E-mail</label>\n        <input type='email' id='email' onChange={emailInputChangeHandler} value={enteredEmail} onBlur={emailInputBlurHandler}/>\n        {emailInputIsInvalid && <p className='error-text'>Email must not be empty and must contain @.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n\n// import { useRef,useState } from 'react';\n\n// const SimpleInput = (props) => {\n//   const nameInputRef=useRef();\n//   const [enteredName,setEnteredName]=useState('');\n//   const [enteredNameIsValid,setEnteredNameIsValid]=useState(false);\n//   const [enteredNameTouched,setEnteredNameTouched]=useState(false);\n\n//   const nameInputChangeHandler=(event)=>{\n//     // event.preventDefault();\n//     setEnteredName(event.target.value);\n//     if(event.target.value.trim()!==''){\n//       setEnteredNameIsValid(true);\n//       return;\n//     }\n//   }\n//   const nameInputBlurHandler=()=>{\n//     setEnteredNameTouched(true);\n//     if(enteredName.trim()===''){\n//       setEnteredNameIsValid(false);\n//       return;\n//     }\n//   }\n//   const formSubmissionHandler=(event)=>{\n//     setEnteredNameTouched(true);\n//     event.preventDefault();\n//     if(enteredName.trim()===''){\n//       setEnteredNameIsValid(false);\n//       return;\n//     }\n//     setEnteredNameIsValid(true);\n//     console.log(enteredName);\n//     console.log(nameInputRef.current.value);\n//     setEnteredName('');\n//   }\n\n//   const nameInputIsInvalid=!enteredNameIsValid && enteredNameTouched;\n\n//   const nameInputClasses=!nameInputIsInvalid? 'form-control':'form-control invalid';\n\n//   return (\n//     <form onSubmit={formSubmissionHandler}>\n//       <div className={nameInputClasses}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input ref={nameInputRef} type='text' id='name' onChange={nameInputChangeHandler} value={enteredName} onBlur={nameInputBlurHandler}/>\n//         {nameInputIsInvalid && <p className='error-text'>Name must not be empty.</p>}\n//       </div>\n//       <div className=\"form-actions\">\n//         <button>Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}