{"ast":null,"code":"var _jsxFileName = \"/Users/prathambansal/Desktop/forms/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = enteredEmail.trim() !== '' && enteredEmail.includes('@');\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n  const nameInputClasses = !nameInputIsInvalid ? 'form-control' : 'form-control invalid';\n  const emailInputClasses = !emailInputIsInvalid ? 'form-control' : 'form-control invalid';\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n  };\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n    console.log(enteredName);\n    console.log(enteredEmail);\n    setEnteredName('');\n    setEnteredEmail('');\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        value: enteredEmail,\n        onBlur: emailInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty and must contain @.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"xjdkQJJfHre4uEDnv+I2NEbeTVw=\");\n_c = SimpleInput;\nexport default SimpleInput;\n\n// import { useRef,useState } from 'react';\n\n// const SimpleInput = (props) => {\n//   const nameInputRef=useRef();\n//   const [enteredName,setEnteredName]=useState('');\n//   const [enteredNameIsValid,setEnteredNameIsValid]=useState(false);\n//   const [enteredNameTouched,setEnteredNameTouched]=useState(false);\n\n//   const nameInputChangeHandler=(event)=>{\n//     // event.preventDefault();\n//     setEnteredName(event.target.value);\n//     if(event.target.value.trim()!==''){\n//       setEnteredNameIsValid(true);\n//       return;\n//     }\n//   }\n//   const nameInputBlurHandler=()=>{\n//     setEnteredNameTouched(true);\n//     if(enteredName.trim()===''){\n//       setEnteredNameIsValid(false);\n//       return;\n//     }\n//   }\n//   const formSubmissionHandler=(event)=>{\n//     setEnteredNameTouched(true);\n//     event.preventDefault();\n//     if(enteredName.trim()===''){\n//       setEnteredNameIsValid(false);\n//       return;\n//     }\n//     setEnteredNameIsValid(true);\n//     console.log(enteredName);\n//     console.log(nameInputRef.current.value);\n//     setEnteredName('');\n//   }\n\n//   const nameInputIsInvalid=!enteredNameIsValid && enteredNameTouched;\n\n//   const nameInputClasses=!nameInputIsInvalid? 'form-control':'form-control invalid';\n\n//   return (\n//     <form onSubmit={formSubmissionHandler}>\n//       <div className={nameInputClasses}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input ref={nameInputRef} type='text' id='name' onChange={nameInputChangeHandler} value={enteredName} onBlur={nameInputBlurHandler}/>\n//         {nameInputIsInvalid && <p className='error-text'>Name must not be empty.</p>}\n//       </div>\n//       <div className=\"form-actions\">\n//         <button>Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","SimpleInput","props","_s","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","trim","includes","emailInputIsInvalid","enteredNameIsValid","nameInputIsInvalid","formIsValid","nameInputClasses","emailInputClasses","emailInputChangeHandler","event","target","value","emailInputBlurHandler","nameInputChangeHandler","nameInputBlurHandler","formSubmissionHandler","preventDefault","console","log","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","onBlur","disabled","_c","$RefreshReg$"],"sources":["/Users/prathambansal/Desktop/forms/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from 'react';\n\nconst SimpleInput = (props) => {\n  const [enteredName,setEnteredName]=useState('');\n  const [enteredNameTouched,setEnteredNameTouched]=useState(false);\n  const [enteredEmail,setEnteredEmail]=useState('');\n  const [enteredEmailTouched,setEnteredEmailTouched]=useState(false);\n  const enteredEmailIsValid=enteredEmail.trim()!=='' && enteredEmail.includes('@');\n  const emailInputIsInvalid=!enteredEmailIsValid && enteredEmailTouched;\n  const enteredNameIsValid=enteredName.trim()!=='';\n  const nameInputIsInvalid=!enteredNameIsValid && enteredNameTouched;\n\n  let formIsValid=false;\n\n  if(enteredNameIsValid && enteredEmailIsValid){\n    formIsValid=true;\n  }\n\n  const nameInputClasses=!nameInputIsInvalid? 'form-control':'form-control invalid';\n  const emailInputClasses=!emailInputIsInvalid? 'form-control':'form-control invalid';\n  const emailInputChangeHandler=(event)=>{\n    setEnteredEmail(event.target.value);\n  }\n  const emailInputBlurHandler=()=>{\n    setEnteredEmailTouched(true);\n  }\n  const nameInputChangeHandler=(event)=>{\n    setEnteredName(event.target.value);\n  }\n  const nameInputBlurHandler=()=>{\n    setEnteredNameTouched(true);\n  }\n  const formSubmissionHandler=(event)=>{\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n    if(!enteredNameIsValid || !enteredEmailIsValid){\n      return;\n    }\n    console.log(enteredName);\n    console.log(enteredEmail);\n    setEnteredName('');\n    setEnteredEmail('');\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  }\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' onChange={nameInputChangeHandler} value={enteredName} onBlur={nameInputBlurHandler}/>\n        {nameInputIsInvalid && <p className='error-text'>Name must not be empty.</p>}\n      </div>\n      <div className={nameInputClasses}>\n        <label htmlFor='email'>Your Name</label>\n        <input type='email' id='email' onChange={emailInputChangeHandler} value={enteredEmail} onBlur={emailInputBlurHandler}/>\n        {emailInputIsInvalid && <p className='error-text'>Email must not be empty and must contain @.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n\n// import { useRef,useState } from 'react';\n\n// const SimpleInput = (props) => {\n//   const nameInputRef=useRef();\n//   const [enteredName,setEnteredName]=useState('');\n//   const [enteredNameIsValid,setEnteredNameIsValid]=useState(false);\n//   const [enteredNameTouched,setEnteredNameTouched]=useState(false);\n\n//   const nameInputChangeHandler=(event)=>{\n//     // event.preventDefault();\n//     setEnteredName(event.target.value);\n//     if(event.target.value.trim()!==''){\n//       setEnteredNameIsValid(true);\n//       return;\n//     }\n//   }\n//   const nameInputBlurHandler=()=>{\n//     setEnteredNameTouched(true);\n//     if(enteredName.trim()===''){\n//       setEnteredNameIsValid(false);\n//       return;\n//     }\n//   }\n//   const formSubmissionHandler=(event)=>{\n//     setEnteredNameTouched(true);\n//     event.preventDefault();\n//     if(enteredName.trim()===''){\n//       setEnteredNameIsValid(false);\n//       return;\n//     }\n//     setEnteredNameIsValid(true);\n//     console.log(enteredName);\n//     console.log(nameInputRef.current.value);\n//     setEnteredName('');\n//   }\n\n//   const nameInputIsInvalid=!enteredNameIsValid && enteredNameTouched;\n\n//   const nameInputClasses=!nameInputIsInvalid? 'form-control':'form-control invalid';\n\n//   return (\n//     <form onSubmit={formSubmissionHandler}>\n//       <div className={nameInputClasses}>\n//         <label htmlFor='name'>Your Name</label>\n//         <input ref={nameInputRef} type='text' id='name' onChange={nameInputChangeHandler} value={enteredName} onBlur={nameInputBlurHandler}/>\n//         {nameInputIsInvalid && <p className='error-text'>Name must not be empty.</p>}\n//       </div>\n//       <div className=\"form-actions\">\n//         <button>Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}